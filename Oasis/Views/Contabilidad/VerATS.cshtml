
@{

    ViewBag.Title = "VerATS";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var mes = new List<string> { "Enero" , "Febrero","Marzo",
        "Abril","Mayo","Junio","Julio","Agosto","Septiembre","Octubre","Noviembre", "Diciembre"};
}


<div class="text-center">
    <h1 class="display-4">Generador de ATS</h1>
    <p>Escoge la empresa, el año y el mes correspondiente para obtener el archivo XML </a>.</p>

    <form action="DevolverATS" method="post" id="ats">
        <select name="empresa" id="emp" form="ats" clas>
            <option>Empresa</option>
            <option>LABOV</option>
            <option>LEBEN</option>
            <option>FARMA</option>
            <option>DANIV</option>
            <option>MEDIT</option>
            <option>ANYUP</option>
        </select>
        <select name="año" id="AñoATS" form="ats">
            <option>Año</option>
            <option>2019</option>
            <option>2020</option>
            <option>2021</option>
        </select>

        @Html.DropDownList("mes", mes.Select(x => new SelectListItem
        {
            Text = x,
            Value =
       Convert.ToString(mes.IndexOf(x) + 1)
        }), "mes")

        <button type="submit" class="btn btn-outline-primary" id="descargar">Descargar</button>
    </form>
</div>

@section Scripts{

    @*<script>
        $("#descargar").click(function () {
            iniciaLoading();
            let empresa = $("#emp").find(":selected").text();
            let año = $("#AñoATS").find(":selected").text();
            let mes = $("#MesATS").find(":selected").text();
            $.ajax({
                url: 'DevolverATS',
                type: "POST",
                data: { empresa: empresa, año: año, mes: mes },
                success: function (response, opts) {
                    cierraLoading();
                    var link = document.createElement("a");
                    //this gives the name "wsnDataModel.xml"
                    var fileName = certurl.substring(certurl.lastIndexOf('/') + 1);
                    link.download = fileName;
                    link.href = certurl;
                    link.click();
                },
                error: function (e) {
                    cierraLoading();
                    Toast.fire({
                        icon: 'error',
                        title: 'Hubo un error al intentar guardar.'
                    })
                }
                //success: function (response, status, xhr) {
                //    cierraLoading();
                //    //var blob = new Blob([d], { type: "application/xml" });
                //    //var url = window.URL || window.webkitURL;
                //    //link = url.createObjectURL(d);
                //    //var a = $("<a />");
                //    //a.attr("download", "ATS_"+empresa+"_"+año+"_"+mes+".xml");
                //    //a.attr("href", link);
                //    //$("body").append(a);
                //    //a[0].click();
                //    //$("body").remove(a);
                //    // check for a filename
                //    var filename = "";
                //    var disposition = xhr.getResponseHeader('Content-Disposition');
                //    if (disposition && disposition.indexOf('attachment') !== -1) {
                //        var filenameRegex = /filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/;
                //        var matches = filenameRegex.exec(disposition);
                //        if (matches != null && matches[1]) filename = matches[1].replace(/['"]/g, '');
                //    }

                //    var type = xhr.getResponseHeader('Content-Type');
                //    var blob = new Blob([response], { type: type });

                //    if (typeof window.navigator.msSaveBlob !== 'undefined') {
                //        // IE workaround for "HTML7007: One or more blob URLs were revoked by closing the blob for which they were created. These URLs will no longer resolve as the data backing the URL has been freed."
                //        window.navigator.msSaveBlob(blob, filename);
                //    } else {
                //        var URL = window.URL || window.webkitURL;
                //        var downloadUrl = URL.createObjectURL(blob);

                //        if (filename) {
                //            // use HTML5 a[download] attribute to specify filename
                //            var a = document.createElement("a");
                //            // safari doesn't support this yet
                //            if (typeof a.download === 'undefined') {
                //                window.location = downloadUrl;
                //            } else {
                //                a.href = downloadUrl;
                //                a.download = filename;
                //                document.body.appendChild(a);
                //                a.click();
                //            }
                //        } else {
                //            window.location = downloadUrl;
                //        }

                //        setTimeout(function () { URL.revokeObjectURL(downloadUrl); }, 100); // cleanup
                //    }
                //},
                //error: function (e) {
                //    cierraLoading();
                //    Toast.fire({
                //        icon: 'error',
                //        title: 'Hubo un error al intentar guardar.'
                //    })
                //}

            })
        })
    </script>*@
    
    
}

