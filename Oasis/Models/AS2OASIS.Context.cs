

//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------


namespace Oasis.Models
{

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;

using System.Data.Entity.Core.Objects;
using System.Linq;


public partial class as2oasis : DbContext
{
    public as2oasis()
        : base("name=as2oasis")
    {

    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }


    public virtual DbSet<C__EFMigrationsHistory> C__EFMigrationsHistory { get; set; }

    public virtual DbSet<AspNetRoleClaims> AspNetRoleClaims { get; set; }

    public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }

    public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }

    public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }

    public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }

    public virtual DbSet<AspNetUserTokens> AspNetUserTokens { get; set; }

    public virtual DbSet<cobros_no_aplicable> cobros_no_aplicable { get; set; }

    public virtual DbSet<concentracion> concentracion { get; set; }

    public virtual DbSet<cpc> cpc { get; set; }

    public virtual DbSet<departamentos> departamentos { get; set; }

    public virtual DbSet<detalle_lista_precio> detalle_lista_precio { get; set; }

    public virtual DbSet<detalle_roles_usuario> detalle_roles_usuario { get; set; }

    public virtual DbSet<detalle_usuario_empresa_sucursal> detalle_usuario_empresa_sucursal { get; set; }

    public virtual DbSet<empresaOasis> empresaOasis { get; set; }

    public virtual DbSet<facturas_no_aplicable> facturas_no_aplicable { get; set; }

    public virtual DbSet<forma_farmaceutica> forma_farmaceutica { get; set; }

    public virtual DbSet<geoubicacion> geoubicacion { get; set; }

    public virtual DbSet<guia_urbano_troq> guia_urbano_troq { get; set; }

    public virtual DbSet<lista_precio> lista_precio { get; set; }

    public virtual DbSet<nc_no_aplicable> nc_no_aplicable { get; set; }

    public virtual DbSet<picking> picking { get; set; }

    public virtual DbSet<presentacion> presentacion { get; set; }

    public virtual DbSet<presupuesto_cabecera> presupuesto_cabecera { get; set; }

    public virtual DbSet<presupuesto_detalle> presupuesto_detalle { get; set; }

    public virtual DbSet<producto_instituciones> producto_instituciones { get; set; }

    public virtual DbSet<productos> productos { get; set; }

    public virtual DbSet<prov_oc_detalle> prov_oc_detalle { get; set; }

    public virtual DbSet<prov_oc_principal> prov_oc_principal { get; set; }

    public virtual DbSet<roles> roles { get; set; }

    public virtual DbSet<sucursalOasis> sucursalOasis { get; set; }

    public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }

    public virtual DbSet<usuarioOasis> usuario { get; set; }

    public virtual DbSet<clientes_actualizacion> clientes_actualizacion { get; set; }

    public virtual DbSet<despacho> despacho { get; set; }

    public virtual DbSet<invt_categoria> invt_categoria { get; set; }

    public virtual DbSet<invt_um> invt_um { get; set; }

    public virtual DbSet<Anticipos> Anticipos { get; set; }

    public virtual DbSet<CarteraBK> CarteraBK { get; set; }

    public virtual DbSet<Cheques_Postfechados> Cheques_Postfechados { get; set; }

    public virtual DbSet<Clientes> Clientes { get; set; }

    public virtual DbSet<Clientes2> Clientes2 { get; set; }

    public virtual DbSet<Cobros_Consolidado> Cobros_Consolidado { get; set; }

    public virtual DbSet<Cobros_Diario> Cobros_Diario { get; set; }

    public virtual DbSet<DetalleOCEnlazada> DetalleOCEnlazada { get; set; }

    public virtual DbSet<GuiaUrbano> GuiaUrbano { get; set; }

    public virtual DbSet<MP_ME_STOCK> MP_ME_STOCK { get; set; }

    public virtual DbSet<NC_Consolidado> NC_Consolidado { get; set; }

    public virtual DbSet<NC_Diario> NC_Diario { get; set; }

    public virtual DbSet<Orden_Produccion_Cabecera> Orden_Produccion_Cabecera { get; set; }

    public virtual DbSet<ordenes_compra> ordenes_compra { get; set; }

    public virtual DbSet<Pedidos> Pedidos { get; set; }

    public virtual DbSet<Picking_Estado> Picking_Estado { get; set; }

    public virtual DbSet<PickingGuias> PickingGuias { get; set; }

    public virtual DbSet<Presupuesto_Vendedor_Detalle> Presupuesto_Vendedor_Detalle { get; set; }

    public virtual DbSet<Proveedores> Proveedores { get; set; }

    public virtual DbSet<Registros_Contabilidad> Registros_Contabilidad { get; set; }

    public virtual DbSet<Reporte_GuiasRemision> Reporte_GuiasRemision { get; set; }

    public virtual DbSet<Stock> Stock { get; set; }

    public virtual DbSet<Transito_MP_ME_OC> Transito_MP_ME_OC { get; set; }

    public virtual DbSet<Transito_MP_ME_pedido> Transito_MP_ME_pedido { get; set; }

    public virtual DbSet<Transito_MP_ME_Total> Transito_MP_ME_Total { get; set; }

    public virtual DbSet<Transito_PT_orden> Transito_PT_orden { get; set; }

    public virtual DbSet<Transito_PT_pedido> Transito_PT_pedido { get; set; }

    public virtual DbSet<Transito_PT_Total> Transito_PT_Total { get; set; }

    public virtual DbSet<Vendedores> Vendedores { get; set; }

    public virtual DbSet<Ventas_Consolidado> Ventas_Consolidado { get; set; }

    public virtual DbSet<cotizacion_detalle> cotizacion_detalle { get; set; }

    public virtual DbSet<cotizacion_cabecera> cotizacion_cabecera { get; set; }

    public virtual DbSet<Cartera> Cartera { get; set; }

    public virtual DbSet<KPI_Salida_Material> KPI_Salida_Material { get; set; }

    public virtual DbSet<relacion_cotizacion_ganadora_perdedora> relacion_cotizacion_ganadora_perdedora { get; set; }

    public virtual DbSet<Costos_Indirectos> Costos_Indirectos { get; set; }

    public virtual DbSet<DVP> DVP { get; set; }

    public virtual DbSet<Orden_Produccion> Orden_Produccion { get; set; }

    public virtual DbSet<Costos_MP_ME> Costos_MP_ME { get; set; }

    public virtual DbSet<Costos_MOD> Costos_MOD { get; set; }

    public virtual DbSet<Cobros_Consolidado_Di> Cobros_Consolidado_Di { get; set; }

    public virtual DbSet<NC_Consolidado_Di> NC_Consolidado_Di { get; set; }

    public virtual DbSet<Vendedores_Distribuidores> Vendedores_Distribuidores { get; set; }

    public virtual DbSet<Ventas_Consolidado_Di> Ventas_Consolidado_Di { get; set; }

    public virtual DbSet<MateriaPrima_Lote> MateriaPrima_Lote { get; set; }

    public virtual DbSet<ProductosMP> ProductosMP { get; set; }

    public virtual DbSet<Cartera_Proveedor> Cartera_Proveedor { get; set; }


    [DbFunction("as2oasis", "SplitString")]
    public virtual IQueryable<SplitString_Result> SplitString(string input, string character)
    {

        var inputParameter = input != null ?
            new ObjectParameter("Input", input) :
            new ObjectParameter("Input", typeof(string));


        var characterParameter = character != null ?
            new ObjectParameter("Character", character) :
            new ObjectParameter("Character", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SplitString_Result>("[as2oasis].[SplitString](@Input, @Character)", inputParameter, characterParameter);
    }


    public virtual int CarteraEmpresa(string empresa, string sucursal, string tipoCliente)
    {

        var empresaParameter = empresa != null ?
            new ObjectParameter("empresa", empresa) :
            new ObjectParameter("empresa", typeof(string));


        var sucursalParameter = sucursal != null ?
            new ObjectParameter("sucursal", sucursal) :
            new ObjectParameter("sucursal", typeof(string));


        var tipoClienteParameter = tipoCliente != null ?
            new ObjectParameter("tipoCliente", tipoCliente) :
            new ObjectParameter("tipoCliente", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CarteraEmpresa", empresaParameter, sucursalParameter, tipoClienteParameter);
    }


    public virtual ObjectResult<CobrosPorVendedor_Result> CobrosPorVendedor(string empresa, string sucursal, Nullable<System.DateTime> fecha_desde, Nullable<System.DateTime> fecha_hasta, string tipoCliente, string idvendedor)
    {

        var empresaParameter = empresa != null ?
            new ObjectParameter("empresa", empresa) :
            new ObjectParameter("empresa", typeof(string));


        var sucursalParameter = sucursal != null ?
            new ObjectParameter("sucursal", sucursal) :
            new ObjectParameter("sucursal", typeof(string));


        var fecha_desdeParameter = fecha_desde.HasValue ?
            new ObjectParameter("fecha_desde", fecha_desde) :
            new ObjectParameter("fecha_desde", typeof(System.DateTime));


        var fecha_hastaParameter = fecha_hasta.HasValue ?
            new ObjectParameter("fecha_hasta", fecha_hasta) :
            new ObjectParameter("fecha_hasta", typeof(System.DateTime));


        var tipoClienteParameter = tipoCliente != null ?
            new ObjectParameter("tipoCliente", tipoCliente) :
            new ObjectParameter("tipoCliente", typeof(string));


        var idvendedorParameter = idvendedor != null ?
            new ObjectParameter("idvendedor", idvendedor) :
            new ObjectParameter("idvendedor", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CobrosPorVendedor_Result>("CobrosPorVendedor", empresaParameter, sucursalParameter, fecha_desdeParameter, fecha_hastaParameter, tipoClienteParameter, idvendedorParameter);
    }


    public virtual ObjectResult<NCPorVendedor_Result> NCPorVendedor(string empresa, string sucursal, Nullable<System.DateTime> fecha_desde, Nullable<System.DateTime> fecha_hasta, string tipoCliente, string idvendedor)
    {

        var empresaParameter = empresa != null ?
            new ObjectParameter("empresa", empresa) :
            new ObjectParameter("empresa", typeof(string));


        var sucursalParameter = sucursal != null ?
            new ObjectParameter("sucursal", sucursal) :
            new ObjectParameter("sucursal", typeof(string));


        var fecha_desdeParameter = fecha_desde.HasValue ?
            new ObjectParameter("fecha_desde", fecha_desde) :
            new ObjectParameter("fecha_desde", typeof(System.DateTime));


        var fecha_hastaParameter = fecha_hasta.HasValue ?
            new ObjectParameter("fecha_hasta", fecha_hasta) :
            new ObjectParameter("fecha_hasta", typeof(System.DateTime));


        var tipoClienteParameter = tipoCliente != null ?
            new ObjectParameter("tipoCliente", tipoCliente) :
            new ObjectParameter("tipoCliente", typeof(string));


        var idvendedorParameter = idvendedor != null ?
            new ObjectParameter("idvendedor", idvendedor) :
            new ObjectParameter("idvendedor", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NCPorVendedor_Result>("NCPorVendedor", empresaParameter, sucursalParameter, fecha_desdeParameter, fecha_hastaParameter, tipoClienteParameter, idvendedorParameter);
    }


    public virtual ObjectResult<Presupuesto_Result> Presupuesto(string empresa, string sucursal, Nullable<System.DateTime> fecha_desde, Nullable<System.DateTime> fecha_hasta, string tipoCliente)
    {

        var empresaParameter = empresa != null ?
            new ObjectParameter("empresa", empresa) :
            new ObjectParameter("empresa", typeof(string));


        var sucursalParameter = sucursal != null ?
            new ObjectParameter("sucursal", sucursal) :
            new ObjectParameter("sucursal", typeof(string));


        var fecha_desdeParameter = fecha_desde.HasValue ?
            new ObjectParameter("fecha_desde", fecha_desde) :
            new ObjectParameter("fecha_desde", typeof(System.DateTime));


        var fecha_hastaParameter = fecha_hasta.HasValue ?
            new ObjectParameter("fecha_hasta", fecha_hasta) :
            new ObjectParameter("fecha_hasta", typeof(System.DateTime));


        var tipoClienteParameter = tipoCliente != null ?
            new ObjectParameter("tipoCliente", tipoCliente) :
            new ObjectParameter("tipoCliente", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Presupuesto_Result>("Presupuesto", empresaParameter, sucursalParameter, fecha_desdeParameter, fecha_hastaParameter, tipoClienteParameter);
    }


    public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        var versionParameter = version.HasValue ?
            new ObjectParameter("version", version) :
            new ObjectParameter("version", typeof(int));


        var definitionParameter = definition != null ?
            new ObjectParameter("definition", definition) :
            new ObjectParameter("definition", typeof(byte[]));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
    }


    public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        var versionParameter = version.HasValue ?
            new ObjectParameter("version", version) :
            new ObjectParameter("version", typeof(int));


        var definitionParameter = definition != null ?
            new ObjectParameter("definition", definition) :
            new ObjectParameter("definition", typeof(byte[]));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
    }


    public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
    }


    public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
    }


    public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
    }


    public virtual int SP_oasis_crea_presentaciones(Nullable<decimal> p_Ln_Organizacion, Nullable<decimal> p_Ln_Maximo_Presentacion_Producto)
    {

        var p_Ln_OrganizacionParameter = p_Ln_Organizacion.HasValue ?
            new ObjectParameter("P_Ln_Organizacion", p_Ln_Organizacion) :
            new ObjectParameter("P_Ln_Organizacion", typeof(decimal));


        var p_Ln_Maximo_Presentacion_ProductoParameter = p_Ln_Maximo_Presentacion_Producto.HasValue ?
            new ObjectParameter("P_Ln_Maximo_Presentacion_Producto", p_Ln_Maximo_Presentacion_Producto) :
            new ObjectParameter("P_Ln_Maximo_Presentacion_Producto", typeof(decimal));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_oasis_crea_presentaciones", p_Ln_OrganizacionParameter, p_Ln_Maximo_Presentacion_ProductoParameter);
    }


    public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        var new_diagramnameParameter = new_diagramname != null ?
            new ObjectParameter("new_diagramname", new_diagramname) :
            new ObjectParameter("new_diagramname", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
    }


    public virtual int sp_upgraddiagrams()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
    }


    public virtual int Stock_Por_Bodega()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Stock_Por_Bodega");
    }


    public virtual ObjectResult<VentasPorVendedor_Result> VentasPorVendedor(string empresa, string sucursal, Nullable<System.DateTime> fecha_desde, Nullable<System.DateTime> fecha_hasta, string tipoCliente, string idvendedor)
    {

        var empresaParameter = empresa != null ?
            new ObjectParameter("empresa", empresa) :
            new ObjectParameter("empresa", typeof(string));


        var sucursalParameter = sucursal != null ?
            new ObjectParameter("sucursal", sucursal) :
            new ObjectParameter("sucursal", typeof(string));


        var fecha_desdeParameter = fecha_desde.HasValue ?
            new ObjectParameter("fecha_desde", fecha_desde) :
            new ObjectParameter("fecha_desde", typeof(System.DateTime));


        var fecha_hastaParameter = fecha_hasta.HasValue ?
            new ObjectParameter("fecha_hasta", fecha_hasta) :
            new ObjectParameter("fecha_hasta", typeof(System.DateTime));


        var tipoClienteParameter = tipoCliente != null ?
            new ObjectParameter("tipoCliente", tipoCliente) :
            new ObjectParameter("tipoCliente", typeof(string));


        var idvendedorParameter = idvendedor != null ?
            new ObjectParameter("idvendedor", idvendedor) :
            new ObjectParameter("idvendedor", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VentasPorVendedor_Result>("VentasPorVendedor", empresaParameter, sucursalParameter, fecha_desdeParameter, fecha_hastaParameter, tipoClienteParameter, idvendedorParameter);
    }


    public virtual ObjectResult<CarteraEmpresa1_Result> CarteraEmpresa1(string empresa, string sucursal, string tipoCliente)
    {

        var empresaParameter = empresa != null ?
            new ObjectParameter("empresa", empresa) :
            new ObjectParameter("empresa", typeof(string));


        var sucursalParameter = sucursal != null ?
            new ObjectParameter("sucursal", sucursal) :
            new ObjectParameter("sucursal", typeof(string));


        var tipoClienteParameter = tipoCliente != null ?
            new ObjectParameter("tipoCliente", tipoCliente) :
            new ObjectParameter("tipoCliente", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CarteraEmpresa1_Result>("CarteraEmpresa1", empresaParameter, sucursalParameter, tipoClienteParameter);
    }


    public virtual ObjectResult<PresupuestoDI_Result> PresupuestoDI(string empresa, string sucursal, Nullable<System.DateTime> fecha_desde, Nullable<System.DateTime> fecha_hasta)
    {

        var empresaParameter = empresa != null ?
            new ObjectParameter("empresa", empresa) :
            new ObjectParameter("empresa", typeof(string));


        var sucursalParameter = sucursal != null ?
            new ObjectParameter("sucursal", sucursal) :
            new ObjectParameter("sucursal", typeof(string));


        var fecha_desdeParameter = fecha_desde.HasValue ?
            new ObjectParameter("fecha_desde", fecha_desde) :
            new ObjectParameter("fecha_desde", typeof(System.DateTime));


        var fecha_hastaParameter = fecha_hasta.HasValue ?
            new ObjectParameter("fecha_hasta", fecha_hasta) :
            new ObjectParameter("fecha_hasta", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PresupuestoDI_Result>("PresupuestoDI", empresaParameter, sucursalParameter, fecha_desdeParameter, fecha_hastaParameter);
    }


    public virtual ObjectResult<CobrosPorVendedorDi_Result> CobrosPorVendedorDi(string empresa, string sucursal, Nullable<System.DateTime> fecha_desde, Nullable<System.DateTime> fecha_hasta, string tipoCliente, string idvendedor)
    {

        var empresaParameter = empresa != null ?
            new ObjectParameter("empresa", empresa) :
            new ObjectParameter("empresa", typeof(string));


        var sucursalParameter = sucursal != null ?
            new ObjectParameter("sucursal", sucursal) :
            new ObjectParameter("sucursal", typeof(string));


        var fecha_desdeParameter = fecha_desde.HasValue ?
            new ObjectParameter("fecha_desde", fecha_desde) :
            new ObjectParameter("fecha_desde", typeof(System.DateTime));


        var fecha_hastaParameter = fecha_hasta.HasValue ?
            new ObjectParameter("fecha_hasta", fecha_hasta) :
            new ObjectParameter("fecha_hasta", typeof(System.DateTime));


        var tipoClienteParameter = tipoCliente != null ?
            new ObjectParameter("tipoCliente", tipoCliente) :
            new ObjectParameter("tipoCliente", typeof(string));


        var idvendedorParameter = idvendedor != null ?
            new ObjectParameter("idvendedor", idvendedor) :
            new ObjectParameter("idvendedor", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CobrosPorVendedorDi_Result>("CobrosPorVendedorDi", empresaParameter, sucursalParameter, fecha_desdeParameter, fecha_hastaParameter, tipoClienteParameter, idvendedorParameter);
    }


    public virtual ObjectResult<NCPorVendedorDi_Result> NCPorVendedorDi(string empresa, string sucursal, Nullable<System.DateTime> fecha_desde, Nullable<System.DateTime> fecha_hasta, string tipoCliente, string idvendedor)
    {

        var empresaParameter = empresa != null ?
            new ObjectParameter("empresa", empresa) :
            new ObjectParameter("empresa", typeof(string));


        var sucursalParameter = sucursal != null ?
            new ObjectParameter("sucursal", sucursal) :
            new ObjectParameter("sucursal", typeof(string));


        var fecha_desdeParameter = fecha_desde.HasValue ?
            new ObjectParameter("fecha_desde", fecha_desde) :
            new ObjectParameter("fecha_desde", typeof(System.DateTime));


        var fecha_hastaParameter = fecha_hasta.HasValue ?
            new ObjectParameter("fecha_hasta", fecha_hasta) :
            new ObjectParameter("fecha_hasta", typeof(System.DateTime));


        var tipoClienteParameter = tipoCliente != null ?
            new ObjectParameter("tipoCliente", tipoCliente) :
            new ObjectParameter("tipoCliente", typeof(string));


        var idvendedorParameter = idvendedor != null ?
            new ObjectParameter("idvendedor", idvendedor) :
            new ObjectParameter("idvendedor", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NCPorVendedorDi_Result>("NCPorVendedorDi", empresaParameter, sucursalParameter, fecha_desdeParameter, fecha_hastaParameter, tipoClienteParameter, idvendedorParameter);
    }


    public virtual ObjectResult<VentasPorVendedorDi_Result> VentasPorVendedorDi(string empresa, string sucursal, Nullable<System.DateTime> fecha_desde, Nullable<System.DateTime> fecha_hasta, string tipoCliente, string idvendedor)
    {

        var empresaParameter = empresa != null ?
            new ObjectParameter("empresa", empresa) :
            new ObjectParameter("empresa", typeof(string));


        var sucursalParameter = sucursal != null ?
            new ObjectParameter("sucursal", sucursal) :
            new ObjectParameter("sucursal", typeof(string));


        var fecha_desdeParameter = fecha_desde.HasValue ?
            new ObjectParameter("fecha_desde", fecha_desde) :
            new ObjectParameter("fecha_desde", typeof(System.DateTime));


        var fecha_hastaParameter = fecha_hasta.HasValue ?
            new ObjectParameter("fecha_hasta", fecha_hasta) :
            new ObjectParameter("fecha_hasta", typeof(System.DateTime));


        var tipoClienteParameter = tipoCliente != null ?
            new ObjectParameter("tipoCliente", tipoCliente) :
            new ObjectParameter("tipoCliente", typeof(string));


        var idvendedorParameter = idvendedor != null ?
            new ObjectParameter("idvendedor", idvendedor) :
            new ObjectParameter("idvendedor", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VentasPorVendedorDi_Result>("VentasPorVendedorDi", empresaParameter, sucursalParameter, fecha_desdeParameter, fecha_hastaParameter, tipoClienteParameter, idvendedorParameter);
    }


    public virtual int Presupuesto_Consolidado(string empresa, string sucursal, Nullable<System.DateTime> fecha_desde, Nullable<System.DateTime> fecha_hasta, string tipoCliente)
    {

        var empresaParameter = empresa != null ?
            new ObjectParameter("empresa", empresa) :
            new ObjectParameter("empresa", typeof(string));


        var sucursalParameter = sucursal != null ?
            new ObjectParameter("sucursal", sucursal) :
            new ObjectParameter("sucursal", typeof(string));


        var fecha_desdeParameter = fecha_desde.HasValue ?
            new ObjectParameter("fecha_desde", fecha_desde) :
            new ObjectParameter("fecha_desde", typeof(System.DateTime));


        var fecha_hastaParameter = fecha_hasta.HasValue ?
            new ObjectParameter("fecha_hasta", fecha_hasta) :
            new ObjectParameter("fecha_hasta", typeof(System.DateTime));


        var tipoClienteParameter = tipoCliente != null ?
            new ObjectParameter("tipoCliente", tipoCliente) :
            new ObjectParameter("tipoCliente", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Presupuesto_Consolidado", empresaParameter, sucursalParameter, fecha_desdeParameter, fecha_hastaParameter, tipoClienteParameter);
    }

}

}

